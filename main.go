package main

import (
	"bufio"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/TheHawk24/pokedexcli/internal/pokecache"
)

type cliCommand struct {
	name        string
	description string
	callback    func(conf *pokemon_location_area, args ...string) error
}

type pokemon_location_area struct {
	Count    int    `json: "count"`
	Next     string `json: "next"`
	Previous string `json: "previous"`
	Results  []struct {
		Name string `json: "name"`
		Url  string `json: "url"`
	} `json: "results"`
}

//type encounter_method struct {
//	Name string `json: "name"`
//	Url  string `json: "url"`
//}
//
//type version_details struct {
//	VersionDetails []struct {
//		Rate    int `json: "rate"`
//		Version struct {
//			Name string `json: "diamond"`
//			Url  string `json: "url"`
//		} `json: "version"`
//	} `json: "version_details"`
//}

//	type encounter_details struct {
//		Chance          int   `json: "chance"`
//		ConditionValues []any `json: "condition_values"`
//		MaxLevel        int   `json: "max_level"`
//		Method          struct {
//			Name string `json: "super-rod"`
//			Url  string `json: "url"`
//		} `json: "method"`
//		MinLevel int `json: "min_level"`
//	}

type explore_area struct {
	EncounterMethodRates []struct {
		EncounterMethod struct {
			Name string `json:"name"`
			Url  string `json:"url"`
		} `json:"encounter_method"`
		VersionDetails []struct {
			Rate    int `json:"rate"`
			Version struct {
				Name string `json:"name"`
				Url  string `json:"url"`
			} `json:"version"`
		} `json:"version_details"`
	} `json:"encounter_method_rates"`
	GameIndex int `json:"game_index"`
	Id        int `json:"id"`
	Location  struct {
		Name string `json:"name"`
		Url  string `json:"url"`
	} `json:"location"`
	Name  string `json:"name"`
	Names []struct {
		Language struct {
			Name string `json:"name"`
			Url  string `json:"url"`
		} `json:"language"`
		Name string `json:"name"`
	} `json:"names"`
	PokemonEncounters []struct {
		Pokemon struct {
			Name string `json:"name"`
			Url  string `json:"url"`
		} `json:"pokemon"`
		VersionDetails []struct {
			EncounterDetails []struct {
				Chance          int   `json:"chance"`
				ConditionValues []any `json:"condition_values"`
				MaxLevel        int   `json:"max_level"`
				Method          struct {
					Name string `json:"name"`
					Url  string `json:"url"`
				} `json:"method"`
				MinLevel int `json:"min_level"`
			} `json:"encounter_details"`
			MaxChance int `json:"max_chance"`
			Version   struct {
				Name string `json:"name"`
				Url  string `json:"url"`
			} `json:"version"`
		} `json:"version_details"`
	} `json:"pokemon_encounters"`
}

var config = &pokemon_location_area{
	Next: "https://pokeapi.co/api/v2/location-area",
}

var cache = pokecache.NewCache(5 * time.Second)

func cleanInput(text string) []string {
	low_string := strings.ToLower(text)
	trimmed := strings.TrimSpace(low_string)
	words := strings.Split(trimmed, " ")
	return words
}

func commandExit(conf *pokemon_location_area, args ...string) error {
	fmt.Println("Closing the Pokedex... Goodbye!")
	os.Exit(0)
	return nil
}

func commandHelp(conf *pokemon_location_area, args ...string) error {
	fmt.Println("Welcome to the Pokedex!\nUsage: ")
	for key, value := range registry() {
		fmt.Printf("%v: %v\n", key, value.description)
	}
	fmt.Println()
	return nil
}

func commandMap(conf *pokemon_location_area, args ...string) error {
	//Check if data is cached
	data, ok := cache.Get(conf.Next)

	if !ok {
		resp, err := http.Get(conf.Next)
		if err != nil {
			return err
		}
		defer resp.Body.Close()

		data, err = io.ReadAll(resp.Body)
		if err != nil {
			return err
		}
		cache.Add(conf.Next, data)
	}
	err := json.Unmarshal(data, conf)
	if err != nil {
		return err
	}
	for _, v := range conf.Results {
		fmt.Println(v.Name)
	}
	return nil
}

func commandMapb(conf *pokemon_location_area, args ...string) error {
	data, ok := cache.Get(conf.Next)
	if !ok {
		resp, err := http.Get(conf.Previous)
		if err != nil {
			return err
		}
		defer resp.Body.Close()

		data, err = io.ReadAll(resp.Body)
		if err != nil {
			return err
		}
		cache.Add(conf.Previous, data)
	}

	err := json.Unmarshal(data, conf)
	if err != nil {
		return err
	}
	for _, v := range conf.Results {
		fmt.Println(v.Name)
	}
	return nil
}

func commandExplore(conf *pokemon_location_area, args ...string) error {

	if len(args) == 0 {
		return errors.New("Provide name or id of a location-area")
	}

	url := "https://pokeapi.co/api/v2/location-area/" + args[0]
	fmt.Println(url)

	data, ok := cache.Get(url)
	if !ok {
		resp, err := http.Get(url)
		if err != nil {
			return err
		}

		defer resp.Body.Close()
		data, err = io.ReadAll(resp.Body)
		if err != nil {
			return err
		}
		cache.Add(url, data)
	}
	var pokemon_area explore_area
	//var pokemon_area AutoGenerated
	err := json.Unmarshal(data, &pokemon_area)
	if err != nil {
		return err
	}
	fmt.Printf("Exploring %v\n", pokemon_area.Name)
	fmt.Println("Found Pokemon:")
	for _, v := range pokemon_area.PokemonEncounters {
		pokemon_name := v.Pokemon.Name
		fmt.Printf("- %v\n", pokemon_name)
	}
	return nil
}

func registry() map[string]cliCommand {
	commands := map[string]cliCommand{
		"exit": {
			name:        "exit",
			description: "Exit the Pokedex",
			callback:    commandExit,
		},
		"help": {
			name:        "help",
			description: "Displays available commands and their usage",
			callback:    commandHelp,
		},
		"map": {
			name:        "map",
			description: "Displays next location areas which are sections of areas",
			callback:    commandMap,
		},
		"mapb": {
			name:        "mapb",
			description: "Displays previous location areas which ares sections of areas",
			callback:    commandMapb,
		},
		"explore": {
			name:        "explore",
			description: "List pokemons located at a certain area",
			callback:    commandExplore,
		},
	}
	return commands
}

func exec_command(command string, args ...string) {
	value, ok := registry()[command]
	if ok {
		err := value.callback(config, args...)
		if err != nil {
			fmt.Println(fmt.Errorf("Error: %v", err))
		}
	} else {
		fmt.Println("Unknown command")
	}
}

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	for {
		fmt.Print("Pokedex > ")
		var cleaned_output []string
		token := scanner.Scan()
		if token {
			user_input := scanner.Text()
			output := cleanInput(user_input)
			cleaned_output = output
		} else {
			continue
		}
		first_word := cleaned_output[0]
		args := cleaned_output[1:]
		exec_command(first_word, args...)
	}
}
